{"id":"node_modules/angular-ui-router/lib-esm/stateProvider.js","dependencies":[{"name":"/Applications/MAMP/htdocs/fuze-address-book/node_modules/angular-ui-router/lib-esm/stateProvider.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Applications/MAMP/htdocs/fuze-address-book/package.json","includedInParent":true,"mtime":1544353714000},{"name":"/Applications/MAMP/htdocs/fuze-address-book/node_modules/angular-ui-router/package.json","includedInParent":true,"mtime":1543964665000},{"name":"@uirouter/core","loc":{"line":2,"column":53},"parent":"/Applications/MAMP/htdocs/fuze-address-book/node_modules/angular-ui-router/lib-esm/stateProvider.js","resolved":"/Applications/MAMP/htdocs/fuze-address-book/node_modules/@uirouter/core/lib-esm/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StateProvider = void 0;\n\nvar _core = require(\"@uirouter/core\");\n\n/** @publicapi @module ng1 */\n\n/** */\n\n/**\n * The Angular 1 `StateProvider`\n *\n * The `$stateProvider` works similar to Angular's v1 router, but it focuses purely\n * on state.\n *\n * A state corresponds to a \"place\" in the application in terms of the overall UI and\n * navigation. A state describes (via the controller / template / view properties) what\n * the UI looks like and does at that place.\n *\n * States often have things in common, and the primary way of factoring out these\n * commonalities in this model is via the state hierarchy, i.e. parent/child states aka\n * nested states.\n *\n * The `$stateProvider` provides interfaces to declare these states for your app.\n */\nvar StateProvider =\n/** @class */\nfunction () {\n  function StateProvider(stateRegistry, stateService) {\n    this.stateRegistry = stateRegistry;\n    this.stateService = stateService;\n    (0, _core.createProxyFunctions)((0, _core.val)(StateProvider.prototype), this, (0, _core.val)(this));\n  }\n  /**\n   * Decorates states when they are registered\n   *\n   * Allows you to extend (carefully) or override (at your own peril) the\n   * `stateBuilder` object used internally by [[StateRegistry]].\n   * This can be used to add custom functionality to ui-router,\n   * for example inferring templateUrl based on the state name.\n   *\n   * When passing only a name, it returns the current (original or decorated) builder\n   * function that matches `name`.\n   *\n   * The builder functions that can be decorated are listed below. Though not all\n   * necessarily have a good use case for decoration, that is up to you to decide.\n   *\n   * In addition, users can attach custom decorators, which will generate new\n   * properties within the state's internal definition. There is currently no clear\n   * use-case for this beyond accessing internal states (i.e. $state.$current),\n   * however, expect this to become increasingly relevant as we introduce additional\n   * meta-programming features.\n   *\n   * **Warning**: Decorators should not be interdependent because the order of\n   * execution of the builder functions in non-deterministic. Builder functions\n   * should only be dependent on the state definition object and super function.\n   *\n   *\n   * Existing builder functions and current return values:\n   *\n   * - **parent** `{object}` - returns the parent state object.\n   * - **data** `{object}` - returns state data, including any inherited data that is not\n   *   overridden by own values (if any).\n   * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}\n   *   or `null`.\n   * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is\n   *   navigable).\n   * - **params** `{object}` - returns an array of state params that are ensured to\n   *   be a super-set of parent's params.\n   * - **views** `{object}` - returns a views object where each key is an absolute view\n   *   name (i.e. \"viewName@stateName\") and each value is the config object\n   *   (template, controller) for the view. Even when you don't use the views object\n   *   explicitly on a state config, one is still created for you internally.\n   *   So by decorating this builder function you have access to decorating template\n   *   and controller properties.\n   * - **ownParams** `{object}` - returns an array of params that belong to the state,\n   *   not including any params defined by ancestor states.\n   * - **path** `{string}` - returns the full path from the root down to this state.\n   *   Needed for state activation.\n   * - **includes** `{object}` - returns an object that includes every state that\n   *   would pass a `$state.includes()` test.\n   *\n   * #### Example:\n   * Override the internal 'views' builder with a function that takes the state\n   * definition, and a reference to the internal function being overridden:\n   * ```js\n   * $stateProvider.decorator('views', function (state, parent) {\n   *   let result = {},\n   *       views = parent(state);\n   *\n   *   angular.forEach(views, function (config, name) {\n   *     let autoName = (state.name + '.' + name).replace('.', '/');\n   *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';\n   *     result[name] = config;\n   *   });\n   *   return result;\n   * });\n   *\n   * $stateProvider.state('home', {\n   *   views: {\n   *     'contact.list': { controller: 'ListController' },\n   *     'contact.item': { controller: 'ItemController' }\n   *   }\n   * });\n   * ```\n   *\n   *\n   * ```js\n   * // Auto-populates list and item views with /partials/home/contact/list.html,\n   * // and /partials/home/contact/item.html, respectively.\n   * $state.go('home');\n   * ```\n   *\n   * @param {string} name The name of the builder function to decorate.\n   * @param {object} func A function that is responsible for decorating the original\n   * builder function. The function receives two parameters:\n   *\n   *   - `{object}` - state - The state config object.\n   *   - `{object}` - super - The original builder function.\n   *\n   * @return {object} $stateProvider - $stateProvider instance\n   */\n\n\n  StateProvider.prototype.decorator = function (name, func) {\n    return this.stateRegistry.decorator(name, func) || this;\n  };\n\n  StateProvider.prototype.state = function (name, definition) {\n    if ((0, _core.isObject)(name)) {\n      definition = name;\n    } else {\n      definition.name = name;\n    }\n\n    this.stateRegistry.register(definition);\n    return this;\n  };\n  /**\n   * Registers an invalid state handler\n   *\n   * This is a passthrough to [[StateService.onInvalid]] for ng1.\n   */\n\n\n  StateProvider.prototype.onInvalid = function (callback) {\n    return this.stateService.onInvalid(callback);\n  };\n\n  return StateProvider;\n}();\n\nexports.StateProvider = StateProvider;","map":{"mappings":[{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":8,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":10,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":1,"column":30},"generated":{"line":12,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":29,"column":0},"generated":{"line":30,"column":4}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":29,"column":0},"generated":{"line":30,"column":17}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":29,"column":0},"generated":{"line":31,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":29,"column":0},"generated":{"line":32,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":29,"column":0},"generated":{"line":32,"column":12}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":30,"column":2},"generated":{"line":33,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":30,"column":2},"generated":{"line":33,"column":11}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":30,"column":2},"generated":{"line":33,"column":24}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":30,"column":22},"generated":{"line":33,"column":25}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":30,"column":2},"generated":{"line":33,"column":38}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":30,"column":60},"generated":{"line":33,"column":40}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":30,"column":2},"generated":{"line":33,"column":52}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":30,"column":86},"generated":{"line":33,"column":54}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":30,"column":22},"generated":{"line":34,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":30,"column":22},"generated":{"line":34,"column":9}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":30,"column":22},"generated":{"line":34,"column":22}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":30,"column":22},"generated":{"line":34,"column":25}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":30,"column":22},"generated":{"line":34,"column":38}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":30,"column":60},"generated":{"line":35,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":30,"column":60},"generated":{"line":35,"column":9}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":30,"column":60},"generated":{"line":35,"column":21}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":30,"column":60},"generated":{"line":35,"column":24}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":30,"column":60},"generated":{"line":35,"column":36}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":31,"column":4},"generated":{"line":36,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":31,"column":25},"generated":{"line":36,"column":36}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":31,"column":29},"generated":{"line":36,"column":51}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":31,"column":42},"generated":{"line":36,"column":64}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":31,"column":43},"generated":{"line":36,"column":65}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":31,"column":25},"generated":{"line":36,"column":74}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":31,"column":4},"generated":{"line":36,"column":75}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":31,"column":55},"generated":{"line":36,"column":77}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":31,"column":4},"generated":{"line":36,"column":81}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":31,"column":61},"generated":{"line":36,"column":83}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":31,"column":65},"generated":{"line":36,"column":98}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":31,"column":61},"generated":{"line":36,"column":102}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":31,"column":4},"generated":{"line":36,"column":103}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":32,"column":3},"generated":{"line":37,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":34,"column":2},"generated":{"line":38,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":123,"column":2},"generated":{"line":129,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":123,"column":2},"generated":{"line":129,"column":2}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":123,"column":2},"generated":{"line":129,"column":15}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":123,"column":2},"generated":{"line":129,"column":16}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":123,"column":2},"generated":{"line":129,"column":25}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":123,"column":2},"generated":{"line":129,"column":26}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":123,"column":2},"generated":{"line":129,"column":35}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":123,"column":2},"generated":{"line":129,"column":38}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":123,"column":12},"generated":{"line":129,"column":48}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":123,"column":2},"generated":{"line":129,"column":52}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":123,"column":26},"generated":{"line":129,"column":54}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":123,"column":2},"generated":{"line":129,"column":58}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":123,"column":47},"generated":{"line":129,"column":60}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":124,"column":4},"generated":{"line":130,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":124,"column":11},"generated":{"line":130,"column":11}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":124,"column":16},"generated":{"line":130,"column":16}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":124,"column":11},"generated":{"line":130,"column":29}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":124,"column":30},"generated":{"line":130,"column":30}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":124,"column":11},"generated":{"line":130,"column":39}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":124,"column":40},"generated":{"line":130,"column":40}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":124,"column":11},"generated":{"line":130,"column":44}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":124,"column":46},"generated":{"line":130,"column":46}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":124,"column":11},"generated":{"line":130,"column":50}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":124,"column":55},"generated":{"line":130,"column":55}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":124,"column":4},"generated":{"line":130,"column":59}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":125,"column":3},"generated":{"line":131,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":123,"column":2},"generated":{"line":131,"column":3}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":261,"column":2},"generated":{"line":133,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":261,"column":2},"generated":{"line":133,"column":2}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":261,"column":2},"generated":{"line":133,"column":15}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":261,"column":2},"generated":{"line":133,"column":16}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":261,"column":2},"generated":{"line":133,"column":25}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":261,"column":2},"generated":{"line":133,"column":26}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":261,"column":2},"generated":{"line":133,"column":31}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":261,"column":2},"generated":{"line":133,"column":34}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":261,"column":8},"generated":{"line":133,"column":44}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":261,"column":2},"generated":{"line":133,"column":48}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":261,"column":19},"generated":{"line":133,"column":50}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":261,"column":2},"generated":{"line":133,"column":60}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":261,"column":35},"generated":{"line":133,"column":62}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":262,"column":4},"generated":{"line":134,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":262,"column":8},"generated":{"line":134,"column":8}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":262,"column":17},"generated":{"line":134,"column":28}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":262,"column":8},"generated":{"line":134,"column":32}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":262,"column":4},"generated":{"line":134,"column":33}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":262,"column":24},"generated":{"line":134,"column":35}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":263,"column":6},"generated":{"line":135,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":263,"column":6},"generated":{"line":135,"column":6}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":263,"column":16},"generated":{"line":135,"column":16}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":263,"column":19},"generated":{"line":135,"column":19}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":263,"column":6},"generated":{"line":135,"column":23}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":264,"column":5},"generated":{"line":136,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":262,"column":4},"generated":{"line":136,"column":5}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":264,"column":11},"generated":{"line":136,"column":11}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":265,"column":6},"generated":{"line":137,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":265,"column":6},"generated":{"line":137,"column":6}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":265,"column":16},"generated":{"line":137,"column":16}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":265,"column":17},"generated":{"line":137,"column":17}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":265,"column":6},"generated":{"line":137,"column":21}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":265,"column":24},"generated":{"line":137,"column":24}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":265,"column":6},"generated":{"line":137,"column":28}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":266,"column":5},"generated":{"line":138,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":267,"column":4},"generated":{"line":140,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":267,"column":9},"generated":{"line":140,"column":9}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":267,"column":4},"generated":{"line":140,"column":22}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":267,"column":23},"generated":{"line":140,"column":23}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":267,"column":4},"generated":{"line":140,"column":31}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":267,"column":32},"generated":{"line":140,"column":32}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":267,"column":4},"generated":{"line":140,"column":42}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":268,"column":4},"generated":{"line":141,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":268,"column":11},"generated":{"line":141,"column":11}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":268,"column":4},"generated":{"line":141,"column":15}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":269,"column":3},"generated":{"line":142,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":261,"column":2},"generated":{"line":142,"column":3}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":271,"column":2},"generated":{"line":143,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":277,"column":2},"generated":{"line":150,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":277,"column":2},"generated":{"line":150,"column":2}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":277,"column":2},"generated":{"line":150,"column":15}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":277,"column":2},"generated":{"line":150,"column":16}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":277,"column":2},"generated":{"line":150,"column":25}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":277,"column":2},"generated":{"line":150,"column":26}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":277,"column":2},"generated":{"line":150,"column":35}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":277,"column":2},"generated":{"line":150,"column":38}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":277,"column":12},"generated":{"line":150,"column":48}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":277,"column":2},"generated":{"line":150,"column":56}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":277,"column":39},"generated":{"line":150,"column":58}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":278,"column":4},"generated":{"line":151,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":278,"column":11},"generated":{"line":151,"column":11}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":278,"column":16},"generated":{"line":151,"column":16}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":278,"column":11},"generated":{"line":151,"column":28}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":278,"column":29},"generated":{"line":151,"column":29}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":278,"column":11},"generated":{"line":151,"column":38}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":278,"column":39},"generated":{"line":151,"column":39}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":278,"column":11},"generated":{"line":151,"column":47}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":278,"column":4},"generated":{"line":151,"column":48}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":279,"column":3},"generated":{"line":152,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":277,"column":2},"generated":{"line":152,"column":3}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":280,"column":0},"generated":{"line":154,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":280,"column":0},"generated":{"line":154,"column":9}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":280,"column":0},"generated":{"line":154,"column":22}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":29,"column":0},"generated":{"line":155,"column":0}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":29,"column":0},"generated":{"line":155,"column":1}},{"source":"angular-ui-router/stateProvider.ts","name":null,"original":{"line":29,"column":0},"generated":{"line":155,"column":3}}],"sources":{"angular-ui-router/stateProvider.ts":"/** @publicapi @module ng1 */ /** */\nimport {\n  val,\n  isObject,\n  createProxyFunctions,\n  BuilderFunction,\n  StateRegistry,\n  StateService,\n  OnInvalidCallback,\n} from '@uirouter/core';\nimport { Ng1StateDeclaration } from './interface';\n\n/**\n * The Angular 1 `StateProvider`\n *\n * The `$stateProvider` works similar to Angular's v1 router, but it focuses purely\n * on state.\n *\n * A state corresponds to a \"place\" in the application in terms of the overall UI and\n * navigation. A state describes (via the controller / template / view properties) what\n * the UI looks like and does at that place.\n *\n * States often have things in common, and the primary way of factoring out these\n * commonalities in this model is via the state hierarchy, i.e. parent/child states aka\n * nested states.\n *\n * The `$stateProvider` provides interfaces to declare these states for your app.\n */\nexport class StateProvider {\n  constructor(private stateRegistry: StateRegistry, private stateService: StateService) {\n    createProxyFunctions(val(StateProvider.prototype), this, val(this));\n  }\n\n  /**\n   * Decorates states when they are registered\n   *\n   * Allows you to extend (carefully) or override (at your own peril) the\n   * `stateBuilder` object used internally by [[StateRegistry]].\n   * This can be used to add custom functionality to ui-router,\n   * for example inferring templateUrl based on the state name.\n   *\n   * When passing only a name, it returns the current (original or decorated) builder\n   * function that matches `name`.\n   *\n   * The builder functions that can be decorated are listed below. Though not all\n   * necessarily have a good use case for decoration, that is up to you to decide.\n   *\n   * In addition, users can attach custom decorators, which will generate new\n   * properties within the state's internal definition. There is currently no clear\n   * use-case for this beyond accessing internal states (i.e. $state.$current),\n   * however, expect this to become increasingly relevant as we introduce additional\n   * meta-programming features.\n   *\n   * **Warning**: Decorators should not be interdependent because the order of\n   * execution of the builder functions in non-deterministic. Builder functions\n   * should only be dependent on the state definition object and super function.\n   *\n   *\n   * Existing builder functions and current return values:\n   *\n   * - **parent** `{object}` - returns the parent state object.\n   * - **data** `{object}` - returns state data, including any inherited data that is not\n   *   overridden by own values (if any).\n   * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}\n   *   or `null`.\n   * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is\n   *   navigable).\n   * - **params** `{object}` - returns an array of state params that are ensured to\n   *   be a super-set of parent's params.\n   * - **views** `{object}` - returns a views object where each key is an absolute view\n   *   name (i.e. \"viewName@stateName\") and each value is the config object\n   *   (template, controller) for the view. Even when you don't use the views object\n   *   explicitly on a state config, one is still created for you internally.\n   *   So by decorating this builder function you have access to decorating template\n   *   and controller properties.\n   * - **ownParams** `{object}` - returns an array of params that belong to the state,\n   *   not including any params defined by ancestor states.\n   * - **path** `{string}` - returns the full path from the root down to this state.\n   *   Needed for state activation.\n   * - **includes** `{object}` - returns an object that includes every state that\n   *   would pass a `$state.includes()` test.\n   *\n   * #### Example:\n   * Override the internal 'views' builder with a function that takes the state\n   * definition, and a reference to the internal function being overridden:\n   * ```js\n   * $stateProvider.decorator('views', function (state, parent) {\n   *   let result = {},\n   *       views = parent(state);\n   *\n   *   angular.forEach(views, function (config, name) {\n   *     let autoName = (state.name + '.' + name).replace('.', '/');\n   *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';\n   *     result[name] = config;\n   *   });\n   *   return result;\n   * });\n   *\n   * $stateProvider.state('home', {\n   *   views: {\n   *     'contact.list': { controller: 'ListController' },\n   *     'contact.item': { controller: 'ItemController' }\n   *   }\n   * });\n   * ```\n   *\n   *\n   * ```js\n   * // Auto-populates list and item views with /partials/home/contact/list.html,\n   * // and /partials/home/contact/item.html, respectively.\n   * $state.go('home');\n   * ```\n   *\n   * @param {string} name The name of the builder function to decorate.\n   * @param {object} func A function that is responsible for decorating the original\n   * builder function. The function receives two parameters:\n   *\n   *   - `{object}` - state - The state config object.\n   *   - `{object}` - super - The original builder function.\n   *\n   * @return {object} $stateProvider - $stateProvider instance\n   */\n  decorator(name: string, func: BuilderFunction) {\n    return this.stateRegistry.decorator(name, func) || this;\n  }\n\n  /**\n   * Registers a state\n   *\n   * ### This is a passthrough to [[StateRegistry.register]].\n   *\n   * Registers a state configuration under a given state name.\n   * The stateConfig object has the following acceptable properties.\n   *\n   * <a id='template'></a>\n   *\n   * - **`template`** - {string|function=} - html template as a string or a function that returns\n   *   an html template as a string which should be used by the uiView directives. This property\n   *   takes precedence over templateUrl.\n   *\n   *   If `template` is a function, it will be called with the following parameters:\n   *\n   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by\n   *     applying the current state\n   *\n   * <a id='templateUrl'></a>\n   *\n   * - **`templateUrl`** - {string|function=} - path or function that returns a path to an html\n   *   template that should be used by uiView.\n   *\n   *   If `templateUrl` is a function, it will be called with the following parameters:\n   *\n   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by\n   *     applying the current state\n   *\n   * <a id='templateProvider'></a>\n   *\n   * - **`templateProvider`** - {function=} - Provider function that returns HTML content\n   *   string.\n   *\n   * <a id='controller'></a>\n   *\n   * - **`controller`** - {string|function=} -  Controller fn that should be associated with newly\n   *   related scope or the name of a registered controller if passed as a string.\n   *\n   * <a id='controllerProvider'></a>\n   *\n   * - **`controllerProvider`** - {function=} - Injectable provider function that returns\n   *   the actual controller or string.\n   *\n   * <a id='controllerAs'></a>\n   *\n   * - **`controllerAs`** – {string=} – A controller alias name. If present the controller will be\n   *   published to scope under the controllerAs name.\n   *\n   * <a id='resolve'></a>\n   *\n   * - **`resolve`** - {object.&lt;string, function&gt;=} - An optional map of dependencies which\n   *   should be injected into the controller. If any of these dependencies are promises,\n   *   the router will wait for them all to be resolved or one to be rejected before the\n   *   controller is instantiated. If all the promises are resolved successfully, the values\n   *   of the resolved promises are injected and $stateChangeSuccess event is fired. If any\n   *   of the promises are rejected the $stateChangeError event is fired. The map object is:\n   *\n   *   - key - {string}: name of dependency to be injected into controller\n   *   - factory - {string|function}: If string then it is alias for service. Otherwise if function,\n   *     it is injected and return value it treated as dependency. If result is a promise, it is\n   *     resolved before its value is injected into controller.\n   *\n   * <a id='url'></a>\n   *\n   * - **`url`** - {string=} - A url with optional parameters. When a state is navigated or\n   *   transitioned to, the `$stateParams` service will be populated with any\n   *   parameters that were passed.\n   *\n   * <a id='params'></a>\n   *\n   * - **`params`** - {object=} - An array of parameter names or regular expressions. Only\n   *   use this within a state if you are not using url. Otherwise you can specify your\n   *   parameters within the url. When a state is navigated or transitioned to, the\n   *   $stateParams service will be populated with any parameters that were passed.\n   *\n   * <a id='views'></a>\n   *\n   * - **`views`** - {object=} - Use the views property to set up multiple views or to target views\n   *   manually/explicitly.\n   *\n   * <a id='abstract'></a>\n   *\n   * - **`abstract`** - {boolean=} - An abstract state will never be directly activated,\n   *   but can provide inherited properties to its common children states.\n   *\n   * <a id='onEnter'></a>\n   *\n   * - **`onEnter`** - {object=} - Callback function for when a state is entered. Good way\n   *   to trigger an action or dispatch an event, such as opening a dialog.\n   * If minifying your scripts, make sure to use the `['injection1', 'injection2', function(injection1, injection2){}]` syntax.\n   *\n   * <a id='onExit'></a>\n   *\n   * - **`onExit`** - {object=} - Callback function for when a state is exited. Good way to\n   *   trigger an action or dispatch an event, such as opening a dialog.\n   * If minifying your scripts, make sure to use the `['injection1', 'injection2', function(injection1, injection2){}]` syntax.\n   *\n   * <a id='reloadOnSearch'></a>\n   *\n   * - **`reloadOnSearch = true`** - {boolean=} - If `false`, will not retrigger the same state\n   *   just because a search/query parameter has changed (via $location.search() or $location.hash()).\n   *   Useful for when you'd like to modify $location.search() without triggering a reload.\n   *\n   * <a id='data'></a>\n   *\n   * - **`data`** - {object=} - Arbitrary data object, useful for custom configuration.\n   *\n   * #### Example:\n   * Some state name examples\n   * ```js\n   * // stateName can be a single top-level name (must be unique).\n   * $stateProvider.state(\"home\", {});\n   *\n   * // Or it can be a nested state name. This state is a child of the\n   * // above \"home\" state.\n   * $stateProvider.state(\"home.newest\", {});\n   *\n   * // Nest states as deeply as needed.\n   * $stateProvider.state(\"home.newest.abc.xyz.inception\", {});\n   *\n   * // state() returns $stateProvider, so you can chain state declarations.\n   * $stateProvider\n   *   .state(\"home\", {})\n   *   .state(\"about\", {})\n   *   .state(\"contacts\", {});\n   * ```\n   *\n   * @param {string} name A unique state name, e.g. \"home\", \"about\", \"contacts\".\n   * To create a parent/child state use a dot, e.g. \"about.sales\", \"home.newest\".\n   * @param {object} definition State configuration object.\n   */\n  state(name: string, definition: Ng1StateDeclaration): StateProvider;\n  state(definition: Ng1StateDeclaration): StateProvider;\n  state(name: any, definition?: any) {\n    if (isObject(name)) {\n      definition = name;\n    } else {\n      definition.name = name;\n    }\n    this.stateRegistry.register(definition);\n    return this;\n  }\n\n  /**\n   * Registers an invalid state handler\n   *\n   * This is a passthrough to [[StateService.onInvalid]] for ng1.\n   */\n\n  onInvalid(callback: OnInvalidCallback): Function {\n    return this.stateService.onInvalid(callback);\n  }\n}\n"},"lineCount":null}},"hash":"ee89db3300d68964139038f7d8b6210b","cacheData":{"env":{}}}