{"id":"node_modules/@uirouter/core/lib-esm/interface.js","dependencies":[{"name":"/Applications/MAMP/htdocs/fuze-address-book/node_modules/@uirouter/core/lib-esm/interface.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Applications/MAMP/htdocs/fuze-address-book/package.json","includedInParent":true,"mtime":1543964028000},{"name":"/Applications/MAMP/htdocs/fuze-address-book/node_modules/@uirouter/core/package.json","includedInParent":true,"mtime":1543964666000}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UIRouterPluginBase = void 0;\n\n/**\n * # Core classes and interfaces\n *\n * The classes and interfaces that are core to ui-router and do not belong\n * to a more specific subsystem (such as resolve).\n *\n * @preferred @publicapi @module core\n */\n\n/** */\n\n/** @internalapi */\nvar UIRouterPluginBase =\n/** @class */\nfunction () {\n  function UIRouterPluginBase() {}\n\n  UIRouterPluginBase.prototype.dispose = function (router) {};\n\n  return UIRouterPluginBase;\n}();\n\nexports.UIRouterPluginBase = UIRouterPluginBase;","map":{"mappings":[{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":8,"column":4},"generated":{"line":17,"column":0}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":112,"column":0},"generated":{"line":19,"column":0}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":113,"column":0},"generated":{"line":20,"column":0}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":113,"column":0},"generated":{"line":20,"column":4}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":113,"column":0},"generated":{"line":20,"column":22}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":113,"column":0},"generated":{"line":21,"column":0}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":113,"column":0},"generated":{"line":22,"column":0}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":113,"column":0},"generated":{"line":22,"column":12}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":113,"column":0},"generated":{"line":23,"column":0}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":113,"column":0},"generated":{"line":23,"column":11}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":113,"column":0},"generated":{"line":23,"column":29}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":113,"column":0},"generated":{"line":23,"column":32}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":116,"column":1},"generated":{"line":23,"column":33}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":115,"column":2},"generated":{"line":25,"column":0}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":115,"column":2},"generated":{"line":25,"column":2}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":115,"column":2},"generated":{"line":25,"column":20}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":115,"column":2},"generated":{"line":25,"column":21}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":115,"column":2},"generated":{"line":25,"column":30}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":115,"column":2},"generated":{"line":25,"column":31}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":115,"column":2},"generated":{"line":25,"column":38}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":115,"column":2},"generated":{"line":25,"column":41}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":115,"column":10},"generated":{"line":25,"column":51}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":115,"column":2},"generated":{"line":25,"column":57}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":115,"column":26},"generated":{"line":25,"column":59}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":115,"column":30},"generated":{"line":25,"column":60}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":115,"column":2},"generated":{"line":25,"column":61}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":116,"column":0},"generated":{"line":27,"column":0}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":116,"column":0},"generated":{"line":27,"column":9}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":116,"column":0},"generated":{"line":27,"column":27}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":113,"column":0},"generated":{"line":28,"column":0}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":113,"column":0},"generated":{"line":28,"column":1}},{"source":"@uirouter/core/interface.ts","name":null,"original":{"line":113,"column":0},"generated":{"line":28,"column":3}}],"sources":{"@uirouter/core/interface.ts":"/**\n * # Core classes and interfaces\n *\n * The classes and interfaces that are core to ui-router and do not belong\n * to a more specific subsystem (such as resolve).\n *\n * @preferred @publicapi @module core\n */ /** */\n\n// Need to import or export at least one concrete something\nimport { noop } from './common/common';\nimport { UIRouter } from './router';\n\n/**\n * An interface for getting values from dependency injection.\n *\n * This is primarily used to get resolve values for a given token.\n * An instance of the `UIInjector` can be retrieved from the current transition using [[Transition.injector]].\n *\n * ---\n *\n * If no resolve is found for a token, then it will delegate to the native injector.\n * The native injector may be Angular 1 `$injector`, Angular 2 `Injector`, or a simple polyfill.\n *\n * In Angular 2, the native injector might be the root Injector,\n * or it might be a lazy loaded `NgModule` injector scoped to a lazy load state tree.\n */\nexport interface UIInjector {\n  /**\n   * Gets a value from the injector.\n   *\n   * For a given token, returns the value from the injector that matches the token.\n   * If the token is for a resolve that has not yet been fetched, this throws an error.\n   *\n   * #### Example:\n   * ```js\n   * var myResolve = injector.get('myResolve');\n   * ```\n   *\n   * #### ng1 Example:\n   * ```js\n   * // Fetch StateService\n   * injector.get('$state').go('home');\n   * ```\n   *\n   * #### ng2 Example:\n   * ```js\n   * import {StateService} from \"ui-router-ng2\";\n   * // Fetch StateService\n   * injector.get(StateService).go('home');\n   * ```\n   *\n   * #### Typescript Example:\n   * ```js\n   * var stringArray = injector.get<string[]>('myStringArray');\n   * ```\n   *\n   * ### `NOWAIT` policy\n   *\n   * When using [[ResolvePolicy.async]] === `NOWAIT`, the value returned from `get()` is a promise for the result.\n   * The promise is not automatically unwrapped.\n   *\n   * @param token the key for the value to get.  May be a string, a class, or any arbitrary object.\n   * @return the Dependency Injection value that matches the token\n   */\n  get(token: any): any;\n  /** Gets a value as type `T` (generics parameter) */\n  get<T>(token: any): T;\n\n  /**\n   * Asynchronously gets a value from the injector\n   *\n   * For a given token, returns a promise for the value from the injector that matches the token.\n   * If the token is for a resolve that has not yet been fetched, this triggers the resolve to load.\n   *\n   * #### Example:\n   * ```js\n   * return injector.getAsync('myResolve').then(value => {\n   *   if (value === 'declined') return false;\n   * });\n   * ```\n   *\n   * @param token the key for the value to get.  May be a string or arbitrary object.\n   * @return a Promise for the Dependency Injection value that matches the token\n   */\n  getAsync(token: any): Promise<any>;\n  /** Asynchronously gets a value as type `T` (generics parameter) */\n  getAsync<T>(token: any): Promise<T>;\n\n  /**\n   * Gets a value from the native injector\n   *\n   * Returns a value from the native injector, bypassing anything in the [[ResolveContext]].\n   *\n   * Example:\n   * ```js\n   * let someThing = injector.getNative(SomeToken);\n   * ```\n   *\n   * @param token the key for the value to get.  May be a string or arbitrary object.\n   * @return the Dependency Injection value that matches the token\n   */\n  getNative(token: any): any;\n  getNative<T>(token: any): T;\n}\n\n/** @internalapi */\nexport interface UIRouterPlugin extends Disposable {\n  name: string;\n}\n\n/** @internalapi */\nexport abstract class UIRouterPluginBase implements UIRouterPlugin, Disposable {\n  abstract name: string;\n  dispose(router: UIRouter) {}\n}\n\n/** @internalapi */\nexport interface Disposable {\n  /** Instructs the Disposable to clean up any resources */\n  dispose(router?: UIRouter);\n}\n"},"lineCount":null}},"hash":"0b6d6447f6e912ab40c134c08a620c0d","cacheData":{"env":{}}}